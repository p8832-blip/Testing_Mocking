import sqlite3
import time
import threading
import concurrent.futures
import tempfile
import os
import pytest

# =========================================================
# ุฅุนุฏุงุฏุงุช ุงุฎุชุจุงุฑ ุงูุฌูุฏ
# =========================================================
NUM_USERS = 5000  # ุนุฏุฏ ุงูุฎููุท ุงููุชุฒุงููุฉ
TOTAL_TASKS = 10000  # ุงูุนุฏุฏ ุงูุฅุฌูุงูู ูุนูููุงุช ุงูุฅุฏุฑุงุฌ
RESULTS_LOCK = threading.Lock()  # ููู ูุชุญุฏูุซ ุงูุนุฏุงุฏุงุช ุงููุดุชุฑูุฉ ุจุดูู ุขูู


# =========================================================
# (A) ุงููุณุฎุฉ ุงููุนุฏูุฉ ูู RealDatabase (ุขููุฉ ููุฎููุท)
# =========================================================
class SafeRealDatabase:
    """ูุณุฎุฉ ุขููุฉ ููุฎููุท ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุณุชุฎุฏู ูููุงู ูุคูุชุงู ุนูู ุงููุฑุต."""

    TEMP_DB_PATH = tempfile.NamedTemporaryFile(suffix=".sqlite", delete=False).name
    # FIX 1: ุฒูุงุฏุฉ ุนุฏุฏ ุงููุญุงููุงุช ูุชุฌุงูุฒ ุฃุฎุทุงุก ุงูููู ุงููุชูุฑุฑุฉ
    MAX_RETRIES = 20
    # FIX 2: ุฒูุงุฏุฉ ุทูููุฉ ูู ุชุฃุฎูุฑ ุฅุนุงุฏุฉ ุงููุญุงููุฉ
    RETRY_DELAY = 0.01
    # FIX 3: ุฒูุงุฏุฉ ุงููููุฉ ุงููููุฉ ูู SQLite ููุณูุงุญ ุจูุฒูุฏ ูู ุงูุงูุชุธุงุฑ
    CONNECTION_TIMEOUT = 10.0  # ุงููููุฉ ุจุงูุซูุงูู

    def __init__(self):
        # ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุชุฃูุฏ ูู ุฅูุดุงุก ุงูุฌุฏูู
        conn = sqlite3.connect(self.TEMP_DB_PATH, check_same_thread=False, timeout=self.CONNECTION_TIMEOUT)
        conn.execute("CREATE TABLE IF NOT EXISTS tasks (name TEXT UNIQUE COLLATE NOCASE, completed INTEGER)")
        conn.commit()
        conn.close()

    def _get_connection(self):
        """ูููุดุฆ ุงุชุตุงูุงู ุฌุฏูุฏุงู ููุฌุฑู ุงูุชูููุฐ ุงูุญุงูู ูุน ุงููููุฉ ุงูุตุญูุญุฉ."""
        # ุชูุฑูุฑ ุงููููุฉ ุงูุตุญูุญุฉ ุฅูู sqlite3.connect
        return sqlite3.connect(self.TEMP_DB_PATH, check_same_thread=False, timeout=self.CONNECTION_TIMEOUT)

    def insert(self, task):
        # ูู ูุนุฏ ููุงู ุญุงุฌุฉ ูุชุนููู conn.timeout ููุง ูุฃูู ุชู ุชุนูููู ูู _get_connection
        for attempt in range(self.MAX_RETRIES):
            conn = self._get_connection()
            try:
                # ๐ ุชูุช ุฅุฒุงูุฉ ุงูุณุทุฑ conn.timeout = 5 ๐
                conn.execute("INSERT INTO tasks (name, completed) VALUES (?, ?)",
                             (task['name'], int(task['completed'])))
                conn.commit()
                conn.close()
                return True
            except sqlite3.IntegrityError:
                conn.close()
                return False
            except sqlite3.OperationalError as e:
                conn.close()
                if 'database is locked' in str(e) and attempt < self.MAX_RETRIES - 1:
                    # ูุณุชุฎุฏู ุชุฃุฎูุฑ ุฅุนุงุฏุฉ ุงููุญุงููุฉ ุงููุชุฒุงูุฏ (Exponential Backoff)
                    time.sleep(self.RETRY_DELAY * (attempt + 1))
                    continue
                else:
                    # ุฅุฐุง ูุงู ุฎุทุฃ ุขุฎุฑ ุฃู ููุฏุช ุงููุญุงููุงุช
                    # ูุทุจุน ุงูุฎุทุฃ ุบูุฑ ุงููุชููุน ููุฑูุนู
                    print(f"FATAL DB ERROR after {attempt + 1} attempts: {e}")
                    raise e
            except Exception as e:
                conn.close()
                raise e
        return False

    def count_tasks(self):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM tasks")
        result = cursor.fetchone()[0]
        conn.close()
        return result

    def cleanup(self):
        """ุฅุฒุงูุฉ ููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุคูุช."""
        if os.path.exists(self.TEMP_DB_PATH):
            os.remove(self.TEMP_DB_PATH)


class TaskService:
    def __init__(self, db):
        self.db = db

    def create_task(self, name):
        if name is None or not str(name).strip():
            raise ValueError("Task name cannot be empty or just whitespace.")
        task_name = str(name).strip()
        if not self.db.insert({"name": task_name, "completed": False}):
            return False
        return True


# =========================================================
# (C) ุฏุงูุฉ ุงูุงุฎุชุจุงุฑ ุงููุนููุฉ (Pytest Test Function)
# =========================================================

def create_task_concurrently(service, task_id, results):
    """ุงูุนูููุฉ ุงูุชู ูุชู ุชุดุบูููุง ูู ูู ุฎูุท."""
    task_name = f"Task_{task_id}"

    try:
        success = service.create_task(task_name)

        with RESULTS_LOCK:
            if success:
                results['success'] += 1
            else:
                results['duplicate_error'] += 1

    except Exception as e:
        with RESULTS_LOCK:
            results['unexpected_error'] += 1
            print(f"ERROR: Unexpected exception: {e}")


def test_stress_task_creation():
    """
    ุงุฎุชุจุงุฑ ุงูุฌูุฏ: ูุญุงูุงุฉ 500 ูุณุชุฎุฏู ูุญุงูููู ุฅูุดุงุก 1000 ูููุฉ
    ููุชุฃูุฏ ูู ุณูุงูุฉ ุงูุจูุงูุงุช ูู ุธุฑูู ุงูุชุฒุงูู.
    """
    # NOTE: ุชู ุฅุนุงุฏุฉ ุชุนููู TOTAL_TASKS ุฅูู 1000
    global TOTAL_TASKS

    db = SafeRealDatabase()
    service = TaskService(db)

    results = {'success': 0, 'duplicate_error': 0, 'unexpected_error': 0}

    print(f"\n--- ุจุฏุก ุงุฎุชุจุงุฑ ุงูุฌูุฏ ({NUM_USERS} ูุณุชุฎุฏู ูุชุฒุงูู) ---")
    start_time = time.time()

    try:
        with concurrent.futures.ThreadPoolExecutor(max_workers=NUM_USERS) as executor:
            # ูุฑุณู ุฏูุนุฉ ูู ุงูููุงู ูููุนุงูุฌุฉ
            futures = [executor.submit(create_task_concurrently, service, i, results) for i in range(TOTAL_TASKS)]
            concurrent.futures.wait(futures)

        end_time = time.time()

        total_time = end_time - start_time
        tasks_in_db = db.count_tasks()

        print("\n--- ุชูุฑูุฑ ุงุฎุชุจุงุฑ ุงูุฌูุฏ ---")
        print(f"ูุฏุฉ ุงูุชุดุบูู ุงููููุฉ: {total_time:.4f} ุซุงููุฉ")
        print(f"ุนุฏุฏ ุงูููุงู ุงูุชู ุชู ุญูุธูุง: {tasks_in_db}")
        print("--------------------------------")

        # ุงูุชุญูู ุงูุฃูู: ูู ุฌููุน ุงูููุงู ุงูุชู ุฃุฑุณููุงูุง ููุฌูุฏุฉุ
        assert tasks_in_db == TOTAL_TASKS, (
            f"Data integrity failed: Expected {TOTAL_TASKS} tasks, but found {tasks_in_db}. "
            f"Check for concurrency or locking issues."
        )

        # ุงูุชุญูู ุงูุซุงูู: ูู ุญุฏุซุช ุฃู ุฃุฎุทุงุก ุบูุฑ ูุชููุนุฉุ
        assert results['unexpected_error'] == 0, (
            f"System stability failed: {results['unexpected_error']} unexpected errors occurred."
        )

        print(f"โ ุงููุฌุงุญ: ุงุฌุชุงุฒ ุงููุธุงู ุงุฎุชุจุงุฑ ุงูุถุบุท ุจูุฌุงุญ. ({TOTAL_TASKS / total_time:.2f} ุนูููุฉ/ุซุงููุฉ)")

    finally:
        # ุฎุทูุฉ ุงูุชูุธูู ูุถูุงู ุฅุฒุงูุฉ ููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุคูุช
        db.cleanup()
