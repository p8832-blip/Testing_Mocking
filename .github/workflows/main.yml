# اسم مسار العمل (Workflow) الذي سيظهر في واجهة GitHub
name: Python CI Pipeline

# تحديد متى يجب تشغيل مسار العمل
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# تحديد المهام التي سيتم تشغيلها
jobs:
  build_and_test:
    # تحديد بيئة التشغيل
    runs-on: ubuntu-latest

    # تحديد مصفوفة لاختبار إصدارات Python متعددة
    strategy:
      matrix:
        python-version: [ '3.11' ]

    # خطوات تنفيذ المهمة
    steps:
      # 1. سحب الكود من المستودع
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 2. إعداد بيئة Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 2.5. إضافة جذر المشروع إلى PYTHONPATH
      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      # 3. تثبيت التبعيات وأدوات الاختبار
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
              pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

      # ✅ 4. تشغيل الاختبارات مع تغطية الكود
      - name: Run Pytest with Coverage
        run: |
          pytest --cov=اسم_مجلد_الكود --cov-report=xml --cov-report=term-missing tests/
      
      # ✅ 5. رفع تقرير التغطية كـ Artifact (اختياري)
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      # 6. الإبلاغ عن النجاح
      - name: Final Success Message
        if: success()
        run: echo "🎉 جميع الاختبارات ناجحة على Python ${{ matrix.python-version }}!"
